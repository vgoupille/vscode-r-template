# Pour build le conteneur avec l'architecture arm64 il faut preciser dans le terminal : 
# CPU=arm64 docker-compose up -d

#ou sinon utiliser le script docker-compose-run.sh qui permet de lancer le conteneur avec l'architecture détectée par le script

services:
  r-dev:
    build:
      context: ..
      dockerfile: docker/Dockerfile.base-r
      args:
        PYTHON_VER: ${PYTHON_VER:-3.10}
        R_VERSION_MAJOR: ${R_VERSION_MAJOR:-4} # par défaut 4
        R_VERSION_MINOR: ${R_VERSION_MINOR:-4} # par défaut 4
        R_VERSION_PATCH: ${R_VERSION_PATCH:-0} # par défaut 0
        QUARTO_VERSION: ${QUARTO_VERSION:-1.5.47} # par défaut 1.5.47
        VENV_NAME: ${VENV_NAME:-r-env} # par défaut r-env
    image: vgoupille/baser:${CPU:-amd64}.${R_VERSION_MAJOR:-4}.${R_VERSION_MINOR:-4}.${R_VERSION_PATCH:-0}
    container_name: MY-CONTAINER-DivideProject
    volumes:
      - ..:/workspace
    working_dir: /workspace
    ports:
      - "8787:8787"  # Pour RStudio Server si ajouté ultérieurement
      - "8888:8888"  # Pour Jupyter Notebook si nécessaire
      - "3838:3838"  # Pour Shiny Server
      - "8050:8050"  # Pour Plotly Dash (version Python de Plotly)
    environment:
      - TERM=xterm-256color
    command: tail -f /dev/null  # Garde le conteneur en cours d'exécution 
